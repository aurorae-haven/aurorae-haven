name: Repository Guardrails

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: guardrails-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect:
    name: Detect configuration
    runs-on: ubuntu-latest
    outputs:
      has_node: ${{ steps.check_node.outputs.exists }}
      has_pa11y: ${{ steps.check_pa11y.outputs.exists }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: check_node
        name: Check Node project
        run: |
          if [ -f package.json ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
      - id: check_pa11y
        name: Check pa11yci.json present
        run: |
          if [ -f pa11yci.json ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

  meta-checks:
    name: Meta required files exist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Ensure copilot instructions present
        run: |
          test -f ".github/copilot-instructions.md" || (echo "Missing .github/copilot-instructions.md" && exit 1)
      - name: Ensure README guidelines present
        run: |
          test -f "README.md" || (echo "Missing README.md" && exit 1)
      - name: Ensure CONTRIBUTING present
        run: |
          test -f "CONTRIBUTING.md" || (echo "Missing CONTRIBUTING.md" && exit 1)

  markdown-links:
    name: Docs validate links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install markdown-link-check
        run: npm install -g markdown-link-check
      - name: Check Markdown links
        run: |
          find . -name "*.md" -print0 | xargs -0 -n 1 markdown-link-check -q

  super-linter:
    name: Lint auto-detect
    runs-on: ubuntu-latest
    needs: [detect]
    if: ${{ needs.detect.outputs.has_node == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci || npm install
      - uses: github/super-linter@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: true
          IGNORE_GENERATED_FILES: true
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          VALIDATE_JAVASCRIPT_STANDARD: false
          FILTER_REGEX_EXCLUDE: .*node_modules.*|.*\.git.*|.*build.*|.*dist.*|.*coverage.*

  gitleaks:
    name: Secrets scan (CLI)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install gitleaks (no action)
        run: |
          set -euo pipefail
          GITLEAKS_VERSION="8.18.4"
          curl -sSL -o gitleaks.tar.gz "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz"
          tar -xzf gitleaks.tar.gz gitleaks
          sudo mv gitleaks /usr/local/bin/gitleaks
          gitleaks version
      - name: Run gitleaks
        run: |
          gitleaks detect --source . --no-banner --redact

  node-security:
    name: Node security and tests
    runs-on: ubuntu-latest
    needs: [detect]
    if: ${{ needs.detect.outputs.has_node == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Install
        run: npm ci --ignore-scripts
      - name: Audit production
        run: npm audit --audit-level=high --omit=dev || (echo "Review audit output above."; exit 1)
      - name: Test
        run: npm test --if-present --silent

  # a11y:
  #   name: Accessibility pa11y-ci
  #   runs-on: ubuntu-latest
  #   needs: [detect]
  #   if: ${{ needs.detect.outputs.has_pa11y == 'true' }}
  #   # Disabled: pa11y-ci requires Chrome/Chromium which conflicts with privacy policy
  #   # Alternative: Manual accessibility testing or Chrome-free tools

  summary:
    name: Summary status
    runs-on: ubuntu-latest
    needs:
      [
        detect,
        meta-checks,
        markdown-links,
        super-linter,
        gitleaks,
        node-security
      ]
    if: always()
    steps:
      - name: Show job outcomes
        run: |
          echo "Detect ${{ needs.detect.result }}"
          echo "Meta ${{ needs.meta-checks.result }}"
          echo "Links ${{ needs.markdown-links.result }}"
          echo "Linter ${{ needs.super-linter.result }}"
          echo "Gitleaks ${{ needs.gitleaks.result }}"
          echo "Node ${{ needs.node-security.result }}"
