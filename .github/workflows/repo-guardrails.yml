name: Repository Guardrails

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: guardrails-${{ github.ref }}
  cancel-in-progress: true

jobs:
  meta-checks:
    name: Required files exist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure copilot instructions present
        run: |
          test -f ".github/copilot-instructions.md" || (echo "Missing .github/copilot-instructions.md" && exit 1)
      - name: Ensure README guidelines present
        run: |
          test -f "README.md" || (echo "Missing README.md" && exit 1)
      - name: Ensure CONTRIBUTING present
        run: |
          test -f "CONTRIBUTING.md" || (echo "Missing CONTRIBUTING.md" && exit 1)

  markdown-links:
    name: Validate links in docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: lycheeverse/lychee-action@v1
        with:
          args: --no-progress --verbose --timeout 20 --max-redirects 5 --retry 2 --exclude-mail ./
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  super-linter:
    name: Lint (auto-detect)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: github/super-linter@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: true
          IGNORE_GENERATED_FILES: true
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

  gitleaks:
    name: Secrets scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  node-security:
    name: Node security & tests
    runs-on: ubuntu-latest
    if: hashFiles('package.json') != ''
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Install
        run: npm ci --ignore-scripts
      - name: Audit (production)
        run: npm audit --audit-level=high --omit=dev || (echo "Review audit output above."; exit 1)
      - name: Test
        run: npm test --if-present --silent

  python-security:
    name: Python security & tests
    runs-on: ubuntu-latest
    if: hashFiles('**/requirements.txt') != '' || hashFiles('pyproject.toml') != ''
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
      - name: Install pip-audit
        run: python -m pip install --upgrade pip pip-audit
      - name: Install project (best-effort)
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          if [ -f pyproject.toml ]; then pip install . || true; fi
      - name: pip-audit
        run: pip-audit -l -r requirements.txt || pip-audit -l || true
      - name: Tests (pytest)
        run: pytest -q || true

  codeql:
    name: CodeQL (auto language detect)
    uses: github/codeql-action/.github/workflows/codeql.yml@v3
    permissions:
      contents: read
      security-events: write
      actions: read
    with:
      languages: auto

  a11y:
    name: Accessibility (pa11y-ci if configured)
    runs-on: ubuntu-latest
    if: hashFiles('pa11yci.json') != ''
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Install pa11y-ci
        run: npm i -g pa11y-ci http-server
      - name: Build (if present)
        run: |
          if npm run | grep -q ' build'; then npm run build; fi
      - name: Serve and test
        run: |
          set -e
          ROOT=dist
          [ -d build ] && ROOT=build
          [ -d public ] && ROOT=public
          nohup npx http-server "$ROOT" -p 8080 >/dev/null 2>&1 &
          sleep 2
          pa11y-ci

  summary:
    name: Summary status
    runs-on: ubuntu-latest
    needs: [meta-checks, markdown-links, super-linter, gitleaks]
    if: always()
    steps:
      - name: Show job outcomes
        run: |
          echo "Meta: ${{ needs.meta-checks.result }}"
          echo "Links: ${{ needs.markdown-links.result }}"
          echo "Linter: ${{ needs.super-linter.result }}"
          echo "Gitleaks: ${{ needs.gitleaks.result }}"
