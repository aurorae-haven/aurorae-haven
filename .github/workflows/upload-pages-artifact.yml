name: Build, Test & Deploy to GitHub Pages

on:
  push:
    branches:
      - main
      - 'feature-*'
      - 'hotfix-*'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # Job 1: Test the code
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Linting temporarily disabled - will be re-enabled later
      # - name: Run linter
      #   run: |
      #     echo "Running linter on source files..."
      #     # Run lint but don't fail on legacy files
      #     npm run lint -- --max-warnings=20 || echo "‚ö†Ô∏è Linting issues found in legacy code (acceptable)"
      #
      #     # Check new/modified files for errors
      #     echo "Checking critical files for errors..."
      #     npx eslint src/pages/ src/utils/ src/__tests__/ --max-warnings=0 || {
      #       echo "‚ùå Linting errors in new code - must be fixed!"
      #       exit 1
      #     }
      #     echo "‚úì New code passes linting checks"

      - name: Run tests
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Check for security vulnerabilities
        run: |
          echo "Checking for vulnerabilities..."
          # Run npm audit and capture output
          npm audit --audit-level=moderate > audit-report.txt 2>&1 || true

          # Display the audit report
          cat audit-report.txt

          # Check if there are vulnerabilities
          if grep -q "vulnerabilities" audit-report.txt; then
            echo "‚ö†Ô∏è Security vulnerabilities detected!"
            
            # Check for known acceptable vulnerabilities (webpack-dev-server is dev-only)
            if grep -q "webpack-dev-server" audit-report.txt; then
              echo "‚úì webpack-dev-server vulnerabilities are acceptable (dev dependency only, not in production build)"
            fi
            
            # Check for any HIGH or CRITICAL vulnerabilities
            if grep -qE "(high|critical) severity" audit-report.txt; then
              echo "‚ùå HIGH or CRITICAL vulnerabilities found - deployment blocked!"
              exit 1
            fi
            
            echo "‚úì Only moderate/low vulnerabilities in dev dependencies - proceeding with deployment"
          else
            echo "‚úì No vulnerabilities found"
          fi

  # Job 2: Build the application
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build React PWA with Vite
        run: npm run build
        env:
          CI: true
          VITE_BASE_URL: '/aurorae-haven/'

      - name: Verify build output
        run: |
          echo "Checking Vite build output..."
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed - dist directory not found!"
            exit 1
          fi

          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build failed - index.html not found!"
            exit 1
          fi

          echo "‚úì Build successful - dist directory contains:"
          ls -la dist/

          echo "‚úì Verifying critical files exist:"
          test -f dist/index.html && echo "  ‚úì index.html"
          test -f dist/manifest.webmanifest && echo "  ‚úì manifest.webmanifest"
          test -f dist/sw.js && echo "  ‚úì sw.js (service worker)"
          test -d dist/assets && echo "  ‚úì assets/ directory"

      - name: Create offline package
        run: |
          echo "üì¶ Creating offline package for download..."
          echo "This will build the app with relative paths for offline use"
          npm run build:offline
        env:
          CI: true

      - name: Upload offline package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: offline-package
          path: dist-offline/*.tar.gz
          retention-days: 90
          if-no-files-found: warn

      - name: Upload offline package to repository branch
        run: |
          echo "üì¶ Uploading offline package to offline-releases branch..."
          
          # Get the package file
          PACKAGE_FILE=$(find dist-offline -name "*.tar.gz" -type f | head -1)
          PACKAGE_NAME=$(basename "$PACKAGE_FILE")
          
          if [ -z "$PACKAGE_FILE" ]; then
            echo "‚ùå No offline package found!"
            exit 1
          fi
          
          echo "  ‚Üí Package: $PACKAGE_NAME"
          
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create or checkout offline-releases branch
          git fetch origin offline-releases:offline-releases 2>/dev/null || git checkout --orphan offline-releases
          git checkout offline-releases 2>/dev/null || true
          
          # Clean the branch (keep only offline packages)
          git rm -rf . 2>/dev/null || true
          
          # Create a simple index
          cat > index.html <<EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Aurorae Haven - Offline Packages</title>
            <style>
              body { font-family: system-ui, sans-serif; max-width: 800px; margin: 2rem auto; padding: 0 1rem; }
              h1 { color: #5B21B6; }
              .package { background: #F3F4F6; padding: 1rem; margin: 1rem 0; border-radius: 8px; }
              .package a { color: #5B21B6; text-decoration: none; font-weight: 600; }
              .package a:hover { text-decoration: underline; }
              .info { color: #6B7280; font-size: 0.9rem; }
            </style>
          </head>
          <body>
            <h1>üåå Aurorae Haven - Offline Packages</h1>
            <p>Download the latest offline package to run Aurorae Haven without internet access.</p>
            
            <div class="package">
              <a href="$PACKAGE_NAME" download>üì¶ $PACKAGE_NAME</a>
              <p class="info">Built: $(date -u +"%Y-%m-%d %H:%M:%S UTC")</p>
              <p class="info">Branch: ${GITHUB_REF##*/} | Commit: ${GITHUB_SHA:0:7}</p>
            </div>
            
            <h2>Installation Instructions</h2>
            <ol>
              <li>Download the package above</li>
              <li>Extract: <code>tar -xzf $PACKAGE_NAME</code></li>
              <li>Open <code>index.html</code> in your browser</li>
            </ol>
            
            <p>üìö <a href="https://github.com/aurorae-haven/aurorae-haven/blob/main/docs/OFFLINE-DOWNLOAD.md">Full Documentation</a></p>
            <p>üè† <a href="https://github.com/aurorae-haven/aurorae-haven">Repository</a></p>
          </body>
          </html>
          EOF
          
          # Copy the package
          cp "$PACKAGE_FILE" .
          
          # Add and commit
          git add index.html "$PACKAGE_NAME"
          git commit -m "Update offline package: $PACKAGE_NAME" || echo "No changes to commit"
          
          # Push to the branch
          git push -f origin offline-releases
          
          echo "‚úì Offline package uploaded to offline-releases branch"
          echo "  ‚Üí Access at: https://github.com/${GITHUB_REPOSITORY}/tree/offline-releases"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  # Job 3: Deploy to GitHub Pages
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages # must be exactly this name for Pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify deployment
        run: |
          echo "‚úì Deployment successful!"
          echo "Site URL: ${{ steps.deployment.outputs.page_url }}"
